{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Code/laracasts-tutorials/lc-react-testing-todo/src/components/TodoList.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nTodoList.propTypes = {\n  todos: PropTypes.array.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  markAsEditing: PropTypes.func.isRequired,\n  updateTodo: PropTypes.func.isRequired,\n  cancelEdit: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  remaining: PropTypes.func.isRequired,\n  completeAllTodos: PropTypes.func.isRequired\n};\n\nfunction TodoList(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"todo-list\",\n      children: props.todos.map((todo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"todo-item-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: () => props.completeTodo(todo.id),\n            checked: todo.isComplete ? true : false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 15\n          }, this), !todo.isEditing ? /*#__PURE__*/_jsxDEV(\"span\", {\n            onDoubleClick: () => props.markAsEditing(todo.id),\n            className: `todo-item-label ${todo.isComplete ? 'line-through' : ''}`,\n            children: todo.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onBlur: event => props.updateTodo(event, todo.id),\n            onKeyDown: event => {\n              if (event.key === 'Enter') {\n                props.updateTodo(event, todo.id);\n              } else if (event.key === 'Escape') {\n                props.cancelEdit(event, todo.id);\n              }\n            },\n            className: \"todo-item-input\",\n            defaultValue: todo.title,\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => props.deleteTodo(todo.id),\n          className: \"x-button\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"x-button-icon\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M6 18L18 6M6 6l12 12\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"check-all-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: props.completeAllTodos,\n          className: \"button\",\n          children: \"Check All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [props.remaining(), \" items remaining\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/ryan/Code/laracasts-tutorials/lc-react-testing-todo/src/components/TodoList.jsx"],"names":["React","PropTypes","TodoList","propTypes","todos","array","isRequired","completeTodo","func","markAsEditing","updateTodo","cancelEdit","deleteTodo","remaining","completeAllTodos","props","map","todo","index","id","isComplete","isEditing","title","event","key"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nTodoList.propTypes = {\n  todos: PropTypes.array.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  markAsEditing: PropTypes.func.isRequired,\n  updateTodo: PropTypes.func.isRequired,\n  cancelEdit: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  remaining: PropTypes.func.isRequired,\n  completeAllTodos: PropTypes.func.isRequired,\n};\n\nfunction TodoList(props) {\n  return (\n    <>\n      <ul className=\"todo-list\">\n        {props.todos.map((todo, index) => (\n          <li key={todo.id} className=\"todo-item-container\">\n            <div className=\"todo-item\">\n              <input\n                type=\"checkbox\"\n                onChange={() => props.completeTodo(todo.id)}\n                checked={todo.isComplete ? true : false}\n              />\n\n              {!todo.isEditing ? (\n                <span\n                  onDoubleClick={() => props.markAsEditing(todo.id)}\n                  className={`todo-item-label ${\n                    todo.isComplete ? 'line-through' : ''\n                  }`}\n                >\n                  {todo.title}\n                </span>\n              ) : (\n                <input\n                  type=\"text\"\n                  onBlur={event => props.updateTodo(event, todo.id)}\n                  onKeyDown={event => {\n                    if (event.key === 'Enter') {\n                      props.updateTodo(event, todo.id);\n                    } else if (event.key === 'Escape') {\n                      props.cancelEdit(event, todo.id);\n                    }\n                  }}\n                  className=\"todo-item-input\"\n                  defaultValue={todo.title}\n                  autoFocus\n                />\n              )}\n            </div>\n            <button\n              onClick={() => props.deleteTodo(todo.id)}\n              className=\"x-button\"\n            >\n              <svg\n                className=\"x-button-icon\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </button>\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"check-all-container\">\n        <div>\n          <button onClick={props.completeAllTodos} className=\"button\">Check All</button>\n        </div>\n\n        <span>{props.remaining()} items remaining</span>\n      </div>\n    </>\n  );\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}